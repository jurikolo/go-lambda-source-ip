name: source-ip

env:
  GO_VERSION: 1.24.3

on:
  push:
    tags: [ "v*" ]

jobs:

  # Build and test the project
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: make build-source-ip

  # Build and deploy the project to GitHub releases
  build-and-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only run on version tags
    needs: build
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build Linux ARM64 binary
      env:
        GOOS: linux
        GOARCH: arm64
        CGO_ENABLED: 0
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}

        go build -ldflags="-s -w -X main.version=${VERSION}" -o bootstrap .
        chmod +x bootstrap
        zip source-ip-${VERSION}-linux-arm64.zip bootstrap
        sha256sum bootstrap > source-ip-${VERSION}-linux-arm64.sha256
        sha256sum source-ip-${VERSION}-linux-arm64.zip >> source-ip-${VERSION}-linux-arm64.sha256

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          source-ip-*-linux-arm64.zip
          source-ip-*-linux-arm64.sha256
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    needs: build-and-release

    permissions:
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false  # Optional: for better output handling

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      run: terraform plan -input=false -no-color
      env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
        TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}